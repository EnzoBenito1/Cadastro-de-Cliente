name: CI/CD Pipeline com Docker Hub

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/cadastro-clientes

jobs:
  test:
    name: Testes Automatizados
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Configurar Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Instalar dependências
      run: npm ci
    
    - name: Executar testes
      run: npm test
    
    - name: Gerar relatório de cobertura
      run: npm test -- --coverage --coverageReporters=text
      continue-on-error: true

  build-and-push:
    name: Build e Push para Docker Hub
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login no Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    
    - name: Extrair metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build e Push da imagem
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Resumo da publicação
      run: |
        echo "### ✅ Imagem publicada com sucesso! 🐳" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Imagens criadas:**" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Para usar:**" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.DOCKER_IMAGE }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "docker run -d -p 3000:3000 ${{ env.DOCKER_IMAGE }}:latest" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  test-published-image:
    name: Testar imagem publicada
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push'
    
    steps:
    - name: Login no Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    
    - name: Pull da imagem
      run: docker pull ${{ env.DOCKER_IMAGE }}:latest
    
    - name: Executar container
      run: |
        docker run -d -p 3000:3000 --name test-container ${{ env.DOCKER_IMAGE }}:latest
        sleep 15
    
    - name: Testar API
      run: |
        echo "Testando API..."
        curl --retry 10 --retry-delay 3 --retry-connrefused http://localhost:3000/api/clientes
        echo "✅ API respondendo!"
    
    - name: Ver logs
      if: always()
      run: docker logs test-container
    
    - name: Cleanup
      if: always()
      run: |
        docker stop test-container || true
        docker rm test-container || true

  lint:
    name: Verificar Qualidade
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Instalar dependências
      run: npm ci
    
    - name: Verificar sintaxe JavaScript
      run: node -c server.js
    
    - name: Verificar estrutura do projeto
      run: |
        test -f server.js && echo "✅ server.js existe"
        test -f package.json && echo "✅ package.json existe"
        test -f Dockerfile && echo "✅ Dockerfile existe"
        test -d public && echo "✅ pasta public existe"
        test -f public/index.html && echo "✅ index.html existe"

  summary:
    name: Resumo da Pipeline
    runs-on: ubuntu-latest
    needs: [test, build-and-push, test-published-image, lint]
    if: always()
    
    steps:
    - name: Resultado Final
      run: |
        echo "## 🎉 Pipeline Completa!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Testes | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build & Push | ${{ needs.build-and-push.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test Image | ${{ needs.test-published-image.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Imagem disponível em:" >> $GITHUB_STEP_SUMMARY
        echo "https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/cadastro-clientes" >> $GITHUB_STEP_SUMMARY